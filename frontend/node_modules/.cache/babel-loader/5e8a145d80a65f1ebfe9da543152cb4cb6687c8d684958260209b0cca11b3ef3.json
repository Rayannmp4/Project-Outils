{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n *  This implementation is still in beta, and may change.\n *\n *  Utility to find if a given file is present and executable.\n */\n\nconst path = require('node:path');\nconst {\n  binaryPaths\n} = require('./seleniumManager');\n\n/**\n * Determines the path of the correct Selenium Manager binary\n * @param {Capabilities} capabilities browser options to fetch the driver\n * @returns {{browserPath: string, driverPath: string}} path of the driver\n * and browser location\n */\nfunction getBinaryPaths(capabilities) {\n  try {\n    const args = getArgs(capabilities);\n    return binaryPaths(args);\n  } catch (e) {\n    throw Error(`Unable to obtain browser driver.\n        For more information on how to install drivers see\n        https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location/. ${e}`);\n  }\n}\nfunction getArgs(options) {\n  let args = ['--browser', options.getBrowserName(), '--language-binding', 'javascript', '--output', 'json'];\n  if (options.getBrowserVersion() && options.getBrowserVersion() !== '') {\n    args.push('--browser-version', options.getBrowserVersion());\n  }\n  const vendorOptions = options.get('goog:chromeOptions') || options.get('ms:edgeOptions') || options.get('moz:firefoxOptions');\n  if (vendorOptions && vendorOptions.binary && vendorOptions.binary !== '') {\n    args.push('--browser-path', path.resolve(vendorOptions.binary));\n  }\n  const proxyOptions = options.getProxy();\n\n  // Check if proxyOptions exists and has properties\n  if (proxyOptions && Object.keys(proxyOptions).length > 0) {\n    const httpProxy = proxyOptions['httpProxy'];\n    const sslProxy = proxyOptions['sslProxy'];\n    if (httpProxy !== undefined) {\n      args.push('--proxy', httpProxy);\n    } else if (sslProxy !== undefined) {\n      args.push('--proxy', sslProxy);\n    }\n  }\n  return args;\n}\n\n// PUBLIC API\nmodule.exports = {\n  getBinaryPaths\n};","map":{"version":3,"names":["path","require","binaryPaths","getBinaryPaths","capabilities","args","getArgs","e","Error","options","getBrowserName","getBrowserVersion","push","vendorOptions","get","binary","resolve","proxyOptions","getProxy","Object","keys","length","httpProxy","sslProxy","undefined","module","exports"],"sources":["C:/Users/rayan/Documents/GitHub/Project-Outils/node_modules/selenium-webdriver/common/driverFinder.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n *  This implementation is still in beta, and may change.\n *\n *  Utility to find if a given file is present and executable.\n */\n\nconst path = require('node:path')\nconst { binaryPaths } = require('./seleniumManager')\n\n/**\n * Determines the path of the correct Selenium Manager binary\n * @param {Capabilities} capabilities browser options to fetch the driver\n * @returns {{browserPath: string, driverPath: string}} path of the driver\n * and browser location\n */\nfunction getBinaryPaths(capabilities) {\n  try {\n    const args = getArgs(capabilities)\n    return binaryPaths(args)\n  } catch (e) {\n    throw Error(\n      `Unable to obtain browser driver.\n        For more information on how to install drivers see\n        https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location/. ${e}`,\n    )\n  }\n}\n\nfunction getArgs(options) {\n  let args = ['--browser', options.getBrowserName(), '--language-binding', 'javascript', '--output', 'json']\n\n  if (options.getBrowserVersion() && options.getBrowserVersion() !== '') {\n    args.push('--browser-version', options.getBrowserVersion())\n  }\n\n  const vendorOptions =\n    options.get('goog:chromeOptions') || options.get('ms:edgeOptions') || options.get('moz:firefoxOptions')\n  if (vendorOptions && vendorOptions.binary && vendorOptions.binary !== '') {\n    args.push('--browser-path', path.resolve(vendorOptions.binary))\n  }\n\n  const proxyOptions = options.getProxy()\n\n  // Check if proxyOptions exists and has properties\n  if (proxyOptions && Object.keys(proxyOptions).length > 0) {\n    const httpProxy = proxyOptions['httpProxy']\n    const sslProxy = proxyOptions['sslProxy']\n\n    if (httpProxy !== undefined) {\n      args.push('--proxy', httpProxy)\n    } else if (sslProxy !== undefined) {\n      args.push('--proxy', sslProxy)\n    }\n  }\n  return args\n}\n\n// PUBLIC API\nmodule.exports = { getBinaryPaths }\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,WAAW,CAAC;AACjC,MAAM;EAAEC;AAAY,CAAC,GAAGD,OAAO,CAAC,mBAAmB,CAAC;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,cAAcA,CAACC,YAAY,EAAE;EACpC,IAAI;IACF,MAAMC,IAAI,GAAGC,OAAO,CAACF,YAAY,CAAC;IAClC,OAAOF,WAAW,CAACG,IAAI,CAAC;EAC1B,CAAC,CAAC,OAAOE,CAAC,EAAE;IACV,MAAMC,KAAK,CACT;AACN;AACA,oGAAoGD,CAAC,EACjG,CAAC;EACH;AACF;AAEA,SAASD,OAAOA,CAACG,OAAO,EAAE;EACxB,IAAIJ,IAAI,GAAG,CAAC,WAAW,EAAEI,OAAO,CAACC,cAAc,CAAC,CAAC,EAAE,oBAAoB,EAAE,YAAY,EAAE,UAAU,EAAE,MAAM,CAAC;EAE1G,IAAID,OAAO,CAACE,iBAAiB,CAAC,CAAC,IAAIF,OAAO,CAACE,iBAAiB,CAAC,CAAC,KAAK,EAAE,EAAE;IACrEN,IAAI,CAACO,IAAI,CAAC,mBAAmB,EAAEH,OAAO,CAACE,iBAAiB,CAAC,CAAC,CAAC;EAC7D;EAEA,MAAME,aAAa,GACjBJ,OAAO,CAACK,GAAG,CAAC,oBAAoB,CAAC,IAAIL,OAAO,CAACK,GAAG,CAAC,gBAAgB,CAAC,IAAIL,OAAO,CAACK,GAAG,CAAC,oBAAoB,CAAC;EACzG,IAAID,aAAa,IAAIA,aAAa,CAACE,MAAM,IAAIF,aAAa,CAACE,MAAM,KAAK,EAAE,EAAE;IACxEV,IAAI,CAACO,IAAI,CAAC,gBAAgB,EAAEZ,IAAI,CAACgB,OAAO,CAACH,aAAa,CAACE,MAAM,CAAC,CAAC;EACjE;EAEA,MAAME,YAAY,GAAGR,OAAO,CAACS,QAAQ,CAAC,CAAC;;EAEvC;EACA,IAAID,YAAY,IAAIE,MAAM,CAACC,IAAI,CAACH,YAAY,CAAC,CAACI,MAAM,GAAG,CAAC,EAAE;IACxD,MAAMC,SAAS,GAAGL,YAAY,CAAC,WAAW,CAAC;IAC3C,MAAMM,QAAQ,GAAGN,YAAY,CAAC,UAAU,CAAC;IAEzC,IAAIK,SAAS,KAAKE,SAAS,EAAE;MAC3BnB,IAAI,CAACO,IAAI,CAAC,SAAS,EAAEU,SAAS,CAAC;IACjC,CAAC,MAAM,IAAIC,QAAQ,KAAKC,SAAS,EAAE;MACjCnB,IAAI,CAACO,IAAI,CAAC,SAAS,EAAEW,QAAQ,CAAC;IAChC;EACF;EACA,OAAOlB,IAAI;AACb;;AAEA;AACAoB,MAAM,CAACC,OAAO,GAAG;EAAEvB;AAAe,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}