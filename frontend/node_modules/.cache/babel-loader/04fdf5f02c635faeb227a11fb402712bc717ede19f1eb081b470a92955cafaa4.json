{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst {\n  BoxClipRectangle,\n  ElementClipRectangle\n} = require('./clipRectangle');\n\n/**\n * Defines the reference point from which to compute offsets for capturing screenshot.\n *\n * @enum {string}\n */\nconst Origin = {\n  VIEWPORT: 'viewport',\n  DOCUMENT: 'document'\n};\n\n/**\n * Represents the optional parameters for capturing a screenshot.\n * Described in https://w3c.github.io/webdriver-bidi/#command-browsingContext-captureScreenshot.\n */\nclass CaptureScreenshotParameters {\n  #map = new Map();\n\n  /**\n   * Sets the origin for capturing the screenshot.\n   *\n   * @param {Origin} origin - The origin for capturing the screenshot. Must be one of `Origin.VIEWPORT` or `Origin.DOCUMENT`.\n   * @returns {CaptureScreenshotParameters} - The current instance of the CaptureScreenshotParameters for chaining.\n   * @throws {Error} - If the provided origin is not valid.\n   */\n  origin(origin) {\n    if (origin !== Origin.VIEWPORT && origin !== Origin.DOCUMENT) {\n      throw new Error(`Origin must be one of ${Object.values(Origin)}. Received:'${origin}'`);\n    }\n    this.#map.set('origin', origin);\n    return this;\n  }\n\n  /**\n   * Sets the image format and quality for capturing a screenshot.\n   *\n   * @param {string} type - The image format type.\n   * @param {number} [quality] - The image quality (optional).\n   * @throws {Error} If the type is not a string or if the quality is not a number.\n   * @returns {CaptureScreenshotParameters} - The current instance of the CaptureScreenshotParameters for chaining.\n   */\n  imageFormat(type, quality = undefined) {\n    if (typeof type !== 'string') {\n      throw new Error(`Type must be an instance of String. Received:'${type}'`);\n    }\n    this.#map.set('type', type);\n    if (quality !== undefined) {\n      if (typeof quality !== 'number') {\n        throw new Error(`Quality must be a number. Received:'${quality}'`);\n      }\n      this.#map.set('quality', quality);\n    }\n    return this;\n  }\n\n  /**\n   * Sets the clip rectangle for capturing a screenshot.\n   *\n   * @param {BoxClipRectangle|ElementClipRectangle} clipRectangle - The clip rectangle to set.\n   * @throws {Error} If the clipRectangle is not an instance of ClipRectangle.\n   * @returns {CaptureScreenshotParameters} - The current instance of the CaptureScreenshotParameters for chaining.\n   */\n  clipRectangle(clipRectangle) {\n    if (!(clipRectangle instanceof BoxClipRectangle || clipRectangle instanceof ElementClipRectangle)) {\n      throw new Error(`ClipRectangle must be an instance of ClipRectangle. Received:'${clipRectangle}'`);\n    }\n    this.#map.set('clip', Object.fromEntries(clipRectangle.asMap()));\n    return this;\n  }\n  asMap() {\n    return this.#map;\n  }\n}\nmodule.exports = {\n  CaptureScreenshotParameters,\n  Origin\n};","map":{"version":3,"names":["BoxClipRectangle","ElementClipRectangle","require","Origin","VIEWPORT","DOCUMENT","CaptureScreenshotParameters","map","Map","origin","Error","Object","values","set","imageFormat","type","quality","undefined","clipRectangle","fromEntries","asMap","module","exports"],"sources":["C:/Users/rayan/Documents/GitHub/Project-Outils/node_modules/selenium-webdriver/bidi/captureScreenshotParameters.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst { BoxClipRectangle, ElementClipRectangle } = require('./clipRectangle')\n\n/**\n * Defines the reference point from which to compute offsets for capturing screenshot.\n *\n * @enum {string}\n */\nconst Origin = {\n  VIEWPORT: 'viewport',\n  DOCUMENT: 'document',\n}\n\n/**\n * Represents the optional parameters for capturing a screenshot.\n * Described in https://w3c.github.io/webdriver-bidi/#command-browsingContext-captureScreenshot.\n */\nclass CaptureScreenshotParameters {\n  #map = new Map()\n\n  /**\n   * Sets the origin for capturing the screenshot.\n   *\n   * @param {Origin} origin - The origin for capturing the screenshot. Must be one of `Origin.VIEWPORT` or `Origin.DOCUMENT`.\n   * @returns {CaptureScreenshotParameters} - The current instance of the CaptureScreenshotParameters for chaining.\n   * @throws {Error} - If the provided origin is not valid.\n   */\n  origin(origin) {\n    if (origin !== Origin.VIEWPORT && origin !== Origin.DOCUMENT) {\n      throw new Error(`Origin must be one of ${Object.values(Origin)}. Received:'${origin}'`)\n    }\n    this.#map.set('origin', origin)\n    return this\n  }\n\n  /**\n   * Sets the image format and quality for capturing a screenshot.\n   *\n   * @param {string} type - The image format type.\n   * @param {number} [quality] - The image quality (optional).\n   * @throws {Error} If the type is not a string or if the quality is not a number.\n   * @returns {CaptureScreenshotParameters} - The current instance of the CaptureScreenshotParameters for chaining.\n   */\n  imageFormat(type, quality = undefined) {\n    if (typeof type !== 'string') {\n      throw new Error(`Type must be an instance of String. Received:'${type}'`)\n    }\n\n    this.#map.set('type', type)\n\n    if (quality !== undefined) {\n      if (typeof quality !== 'number') {\n        throw new Error(`Quality must be a number. Received:'${quality}'`)\n      }\n      this.#map.set('quality', quality)\n    }\n    return this\n  }\n\n  /**\n   * Sets the clip rectangle for capturing a screenshot.\n   *\n   * @param {BoxClipRectangle|ElementClipRectangle} clipRectangle - The clip rectangle to set.\n   * @throws {Error} If the clipRectangle is not an instance of ClipRectangle.\n   * @returns {CaptureScreenshotParameters} - The current instance of the CaptureScreenshotParameters for chaining.\n   */\n  clipRectangle(clipRectangle) {\n    if (!(clipRectangle instanceof BoxClipRectangle || clipRectangle instanceof ElementClipRectangle)) {\n      throw new Error(`ClipRectangle must be an instance of ClipRectangle. Received:'${clipRectangle}'`)\n    }\n    this.#map.set('clip', Object.fromEntries(clipRectangle.asMap()))\n    return this\n  }\n\n  asMap() {\n    return this.#map\n  }\n}\n\nmodule.exports = { CaptureScreenshotParameters, Origin }\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;EAAEA,gBAAgB;EAAEC;AAAqB,CAAC,GAAGC,OAAO,CAAC,iBAAiB,CAAC;;AAE7E;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG;EACbC,QAAQ,EAAE,UAAU;EACpBC,QAAQ,EAAE;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMC,2BAA2B,CAAC;EAChC,CAACC,GAAG,GAAG,IAAIC,GAAG,CAAC,CAAC;;EAEhB;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,MAAMA,CAACA,MAAM,EAAE;IACb,IAAIA,MAAM,KAAKN,MAAM,CAACC,QAAQ,IAAIK,MAAM,KAAKN,MAAM,CAACE,QAAQ,EAAE;MAC5D,MAAM,IAAIK,KAAK,CAAC,yBAAyBC,MAAM,CAACC,MAAM,CAACT,MAAM,CAAC,eAAeM,MAAM,GAAG,CAAC;IACzF;IACA,IAAI,CAAC,CAACF,GAAG,CAACM,GAAG,CAAC,QAAQ,EAAEJ,MAAM,CAAC;IAC/B,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEK,WAAWA,CAACC,IAAI,EAAEC,OAAO,GAAGC,SAAS,EAAE;IACrC,IAAI,OAAOF,IAAI,KAAK,QAAQ,EAAE;MAC5B,MAAM,IAAIL,KAAK,CAAC,iDAAiDK,IAAI,GAAG,CAAC;IAC3E;IAEA,IAAI,CAAC,CAACR,GAAG,CAACM,GAAG,CAAC,MAAM,EAAEE,IAAI,CAAC;IAE3B,IAAIC,OAAO,KAAKC,SAAS,EAAE;MACzB,IAAI,OAAOD,OAAO,KAAK,QAAQ,EAAE;QAC/B,MAAM,IAAIN,KAAK,CAAC,uCAAuCM,OAAO,GAAG,CAAC;MACpE;MACA,IAAI,CAAC,CAACT,GAAG,CAACM,GAAG,CAAC,SAAS,EAAEG,OAAO,CAAC;IACnC;IACA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEE,aAAaA,CAACA,aAAa,EAAE;IAC3B,IAAI,EAAEA,aAAa,YAAYlB,gBAAgB,IAAIkB,aAAa,YAAYjB,oBAAoB,CAAC,EAAE;MACjG,MAAM,IAAIS,KAAK,CAAC,iEAAiEQ,aAAa,GAAG,CAAC;IACpG;IACA,IAAI,CAAC,CAACX,GAAG,CAACM,GAAG,CAAC,MAAM,EAAEF,MAAM,CAACQ,WAAW,CAACD,aAAa,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC;IAChE,OAAO,IAAI;EACb;EAEAA,KAAKA,CAAA,EAAG;IACN,OAAO,IAAI,CAAC,CAACb,GAAG;EAClB;AACF;AAEAc,MAAM,CAACC,OAAO,GAAG;EAAEhB,2BAA2B;EAAEH;AAAO,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}