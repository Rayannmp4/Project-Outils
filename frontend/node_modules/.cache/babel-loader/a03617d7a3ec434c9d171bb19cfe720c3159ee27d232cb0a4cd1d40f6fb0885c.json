{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * Represents a clip rectangle.\n * Described in https://w3c.github.io/webdriver-bidi/#command-browsingContext-captureScreenshot.\n */\nclass ClipRectangle {\n  clipType;\n\n  /**\n   * Constructs a new ClipRectangle object.\n   * @param {string} type - The type of the clip rectangle.\n   */\n  constructor(type) {\n    this.clipType = type;\n  }\n\n  /**\n   * Gets the type of the clip rectangle.\n   * @returns {string} The type of the clip rectangle.\n   */\n  get type() {\n    return this.clipType;\n  }\n  asMap() {}\n}\n\n/**\n * Represents a clip rectangle for an element.\n * @extends ClipRectangle\n */\nclass ElementClipRectangle extends ClipRectangle {\n  #sharedId;\n  #handleId;\n\n  /**\n   * Constructs a new ElementClipRectangle instance.\n   * @param {string} sharedId - The shared ID of the element.\n   * @param {string} [handleId] - The handle ID of the element (optional).\n   */\n  constructor(sharedId, handleId = undefined) {\n    super('element');\n    this.#sharedId = sharedId;\n    if (handleId !== undefined) {\n      this.#handleId = handleId;\n    }\n  }\n\n  /**\n   * Converts the ElementClipRectangle instance to a map.\n   * @returns {Map} - The converted map.\n   */\n  asMap() {\n    const map = new Map();\n    map.set('type', super.type);\n    const sharedReference = new Map();\n    sharedReference.set('sharedId', this.#sharedId);\n    if (this.#handleId !== undefined) {\n      sharedReference.set('handleId', this.#handleId);\n    }\n    map.set('element', Object.fromEntries(sharedReference));\n    return map;\n  }\n}\n\n/**\n * Represents a box-shaped clip rectangle.\n * @extends ClipRectangle\n */\nclass BoxClipRectangle extends ClipRectangle {\n  #x;\n  #y;\n  #width;\n  #height;\n\n  /**\n   * Constructs a new BoxClipRectangle object.\n   * @param {number} x - The x-coordinate of the top-left corner of the rectangle.\n   * @param {number} y - The y-coordinate of the top-left corner of the rectangle.\n   * @param {number} width - The width of the rectangle.\n   * @param {number} height - The height of the rectangle.\n   */\n  constructor(x, y, width, height) {\n    super('box');\n    this.#x = x;\n    this.#y = y;\n    this.#width = width;\n    this.#height = height;\n  }\n\n  /**\n   * Converts the BoxClipRectangle object to a Map.\n   * @returns {Map<string, any>} - The Map representation of the BoxClipRectangle object.\n   */\n  asMap() {\n    const map = new Map();\n    map.set('type', super.type);\n    map.set('x', this.#x);\n    map.set('y', this.#y);\n    map.set('width', this.#width);\n    map.set('height', this.#height);\n    return map;\n  }\n}\nmodule.exports = {\n  BoxClipRectangle,\n  ElementClipRectangle\n};","map":{"version":3,"names":["ClipRectangle","clipType","constructor","type","asMap","ElementClipRectangle","sharedId","handleId","undefined","map","Map","set","sharedReference","Object","fromEntries","BoxClipRectangle","x","y","width","height","module","exports"],"sources":["C:/Users/rayan/Documents/GitHub/Project-Outils/node_modules/selenium-webdriver/bidi/clipRectangle.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * Represents a clip rectangle.\n * Described in https://w3c.github.io/webdriver-bidi/#command-browsingContext-captureScreenshot.\n */\nclass ClipRectangle {\n  clipType\n\n  /**\n   * Constructs a new ClipRectangle object.\n   * @param {string} type - The type of the clip rectangle.\n   */\n  constructor(type) {\n    this.clipType = type\n  }\n\n  /**\n   * Gets the type of the clip rectangle.\n   * @returns {string} The type of the clip rectangle.\n   */\n  get type() {\n    return this.clipType\n  }\n\n  asMap() {}\n}\n\n/**\n * Represents a clip rectangle for an element.\n * @extends ClipRectangle\n */\nclass ElementClipRectangle extends ClipRectangle {\n  #sharedId\n  #handleId\n\n  /**\n   * Constructs a new ElementClipRectangle instance.\n   * @param {string} sharedId - The shared ID of the element.\n   * @param {string} [handleId] - The handle ID of the element (optional).\n   */\n  constructor(sharedId, handleId = undefined) {\n    super('element')\n    this.#sharedId = sharedId\n\n    if (handleId !== undefined) {\n      this.#handleId = handleId\n    }\n  }\n\n  /**\n   * Converts the ElementClipRectangle instance to a map.\n   * @returns {Map} - The converted map.\n   */\n  asMap() {\n    const map = new Map()\n    map.set('type', super.type)\n\n    const sharedReference = new Map()\n    sharedReference.set('sharedId', this.#sharedId)\n    if (this.#handleId !== undefined) {\n      sharedReference.set('handleId', this.#handleId)\n    }\n\n    map.set('element', Object.fromEntries(sharedReference))\n\n    return map\n  }\n}\n\n/**\n * Represents a box-shaped clip rectangle.\n * @extends ClipRectangle\n */\nclass BoxClipRectangle extends ClipRectangle {\n  #x\n  #y\n  #width\n  #height\n\n  /**\n   * Constructs a new BoxClipRectangle object.\n   * @param {number} x - The x-coordinate of the top-left corner of the rectangle.\n   * @param {number} y - The y-coordinate of the top-left corner of the rectangle.\n   * @param {number} width - The width of the rectangle.\n   * @param {number} height - The height of the rectangle.\n   */\n  constructor(x, y, width, height) {\n    super('box')\n    this.#x = x\n    this.#y = y\n    this.#width = width\n    this.#height = height\n  }\n\n  /**\n   * Converts the BoxClipRectangle object to a Map.\n   * @returns {Map<string, any>} - The Map representation of the BoxClipRectangle object.\n   */\n  asMap() {\n    const map = new Map()\n    map.set('type', super.type)\n    map.set('x', this.#x)\n    map.set('y', this.#y)\n    map.set('width', this.#width)\n    map.set('height', this.#height)\n\n    return map\n  }\n}\n\nmodule.exports = { BoxClipRectangle, ElementClipRectangle }\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAMA,aAAa,CAAC;EAClBC,QAAQ;;EAER;AACF;AACA;AACA;EACEC,WAAWA,CAACC,IAAI,EAAE;IAChB,IAAI,CAACF,QAAQ,GAAGE,IAAI;EACtB;;EAEA;AACF;AACA;AACA;EACE,IAAIA,IAAIA,CAAA,EAAG;IACT,OAAO,IAAI,CAACF,QAAQ;EACtB;EAEAG,KAAKA,CAAA,EAAG,CAAC;AACX;;AAEA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,SAASL,aAAa,CAAC;EAC/C,CAACM,QAAQ;EACT,CAACC,QAAQ;;EAET;AACF;AACA;AACA;AACA;EACEL,WAAWA,CAACI,QAAQ,EAAEC,QAAQ,GAAGC,SAAS,EAAE;IAC1C,KAAK,CAAC,SAAS,CAAC;IAChB,IAAI,CAAC,CAACF,QAAQ,GAAGA,QAAQ;IAEzB,IAAIC,QAAQ,KAAKC,SAAS,EAAE;MAC1B,IAAI,CAAC,CAACD,QAAQ,GAAGA,QAAQ;IAC3B;EACF;;EAEA;AACF;AACA;AACA;EACEH,KAAKA,CAAA,EAAG;IACN,MAAMK,GAAG,GAAG,IAAIC,GAAG,CAAC,CAAC;IACrBD,GAAG,CAACE,GAAG,CAAC,MAAM,EAAE,KAAK,CAACR,IAAI,CAAC;IAE3B,MAAMS,eAAe,GAAG,IAAIF,GAAG,CAAC,CAAC;IACjCE,eAAe,CAACD,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,CAACL,QAAQ,CAAC;IAC/C,IAAI,IAAI,CAAC,CAACC,QAAQ,KAAKC,SAAS,EAAE;MAChCI,eAAe,CAACD,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,CAACJ,QAAQ,CAAC;IACjD;IAEAE,GAAG,CAACE,GAAG,CAAC,SAAS,EAAEE,MAAM,CAACC,WAAW,CAACF,eAAe,CAAC,CAAC;IAEvD,OAAOH,GAAG;EACZ;AACF;;AAEA;AACA;AACA;AACA;AACA,MAAMM,gBAAgB,SAASf,aAAa,CAAC;EAC3C,CAACgB,CAAC;EACF,CAACC,CAAC;EACF,CAACC,KAAK;EACN,CAACC,MAAM;;EAEP;AACF;AACA;AACA;AACA;AACA;AACA;EACEjB,WAAWA,CAACc,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAEC,MAAM,EAAE;IAC/B,KAAK,CAAC,KAAK,CAAC;IACZ,IAAI,CAAC,CAACH,CAAC,GAAGA,CAAC;IACX,IAAI,CAAC,CAACC,CAAC,GAAGA,CAAC;IACX,IAAI,CAAC,CAACC,KAAK,GAAGA,KAAK;IACnB,IAAI,CAAC,CAACC,MAAM,GAAGA,MAAM;EACvB;;EAEA;AACF;AACA;AACA;EACEf,KAAKA,CAAA,EAAG;IACN,MAAMK,GAAG,GAAG,IAAIC,GAAG,CAAC,CAAC;IACrBD,GAAG,CAACE,GAAG,CAAC,MAAM,EAAE,KAAK,CAACR,IAAI,CAAC;IAC3BM,GAAG,CAACE,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAACK,CAAC,CAAC;IACrBP,GAAG,CAACE,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAACM,CAAC,CAAC;IACrBR,GAAG,CAACE,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAACO,KAAK,CAAC;IAC7BT,GAAG,CAACE,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAACQ,MAAM,CAAC;IAE/B,OAAOV,GAAG;EACZ;AACF;AAEAW,MAAM,CAACC,OAAO,GAAG;EAAEN,gBAAgB;EAAEV;AAAqB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}