{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nfunction observeMutations(channel) {\n  const observer = new MutationObserver(mutations => {\n    for (const mutation of mutations) {\n      switch (mutation.type) {\n        case 'attributes':\n          // Don't report our own attribute has changed.\n          if (mutation.attributeName === 'data-__webdriver_id') {\n            break;\n          }\n          const curr = mutation.target.getAttribute(mutation.attributeName);\n          let id = mutation.target.dataset.__webdriver_id;\n          if (!id) {\n            id = Math.random().toString(36).substring(2) + Date.now().toString(36);\n            mutation.target.dataset.__webdriver_id = id;\n          }\n          const json = JSON.stringify({\n            target: id,\n            name: mutation.attributeName,\n            value: curr,\n            oldValue: mutation.oldValue\n          });\n          channel(json);\n          break;\n        default:\n          break;\n      }\n    }\n  });\n  observer.observe(document, {\n    attributes: true,\n    attributeOldValue: true,\n    characterData: true,\n    characterDataOldValue: true,\n    childList: true,\n    subtree: true\n  });\n}","map":{"version":3,"names":["observeMutations","channel","observer","MutationObserver","mutations","mutation","type","attributeName","curr","target","getAttribute","id","dataset","__webdriver_id","Math","random","toString","substring","Date","now","json","JSON","stringify","name","value","oldValue","observe","document","attributes","attributeOldValue","characterData","characterDataOldValue","childList","subtree"],"sources":["C:/Users/rayan/Documents/GitHub/Project-Outils/node_modules/selenium-webdriver/lib/atoms/bidi-mutation-listener.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nfunction observeMutations(channel) {\n  const observer = new MutationObserver((mutations) => {\n    for (const mutation of mutations) {\n      switch (mutation.type) {\n        case 'attributes':\n          // Don't report our own attribute has changed.\n          if (mutation.attributeName === 'data-__webdriver_id') {\n            break\n          }\n          const curr = mutation.target.getAttribute(mutation.attributeName)\n          let id = mutation.target.dataset.__webdriver_id\n          if (!id) {\n            id = Math.random().toString(36).substring(2) + Date.now().toString(36)\n            mutation.target.dataset.__webdriver_id = id\n          }\n          const json = JSON.stringify({\n            target: id,\n            name: mutation.attributeName,\n            value: curr,\n            oldValue: mutation.oldValue,\n          })\n          channel(json)\n          break\n        default:\n          break\n      }\n    }\n  })\n\n  observer.observe(document, {\n    attributes: true,\n    attributeOldValue: true,\n    characterData: true,\n    characterDataOldValue: true,\n    childList: true,\n    subtree: true,\n  })\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,gBAAgBA,CAACC,OAAO,EAAE;EACjC,MAAMC,QAAQ,GAAG,IAAIC,gBAAgB,CAAEC,SAAS,IAAK;IACnD,KAAK,MAAMC,QAAQ,IAAID,SAAS,EAAE;MAChC,QAAQC,QAAQ,CAACC,IAAI;QACnB,KAAK,YAAY;UACf;UACA,IAAID,QAAQ,CAACE,aAAa,KAAK,qBAAqB,EAAE;YACpD;UACF;UACA,MAAMC,IAAI,GAAGH,QAAQ,CAACI,MAAM,CAACC,YAAY,CAACL,QAAQ,CAACE,aAAa,CAAC;UACjE,IAAII,EAAE,GAAGN,QAAQ,CAACI,MAAM,CAACG,OAAO,CAACC,cAAc;UAC/C,IAAI,CAACF,EAAE,EAAE;YACPA,EAAE,GAAGG,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACH,QAAQ,CAAC,EAAE,CAAC;YACtEX,QAAQ,CAACI,MAAM,CAACG,OAAO,CAACC,cAAc,GAAGF,EAAE;UAC7C;UACA,MAAMS,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC;YAC1Bb,MAAM,EAAEE,EAAE;YACVY,IAAI,EAAElB,QAAQ,CAACE,aAAa;YAC5BiB,KAAK,EAAEhB,IAAI;YACXiB,QAAQ,EAAEpB,QAAQ,CAACoB;UACrB,CAAC,CAAC;UACFxB,OAAO,CAACmB,IAAI,CAAC;UACb;QACF;UACE;MACJ;IACF;EACF,CAAC,CAAC;EAEFlB,QAAQ,CAACwB,OAAO,CAACC,QAAQ,EAAE;IACzBC,UAAU,EAAE,IAAI;IAChBC,iBAAiB,EAAE,IAAI;IACvBC,aAAa,EAAE,IAAI;IACnBC,qBAAqB,EAAE,IAAI;IAC3BC,SAAS,EAAE,IAAI;IACfC,OAAO,EAAE;EACX,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}