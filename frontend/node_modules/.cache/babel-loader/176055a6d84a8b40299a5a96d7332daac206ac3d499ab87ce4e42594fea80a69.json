{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst {\n  UrlPattern\n} = require('./urlPattern');\nclass AddInterceptParameters {\n  #phases = [];\n  #urlPatterns = [];\n  constructor(phases) {\n    if (phases instanceof Array) {\n      phases.forEach(phase => this.#phases.push(phase));\n    } else {\n      this.#phases.push(phases);\n    }\n  }\n\n  /**\n   * Adds a URL pattern to intercept.\n   *\n   * @param {UrlPattern} pattern - The URL pattern to add.\n   * @returns {AddInterceptParameters} - Returns the current instance of the class AddInterceptParameters for chaining.\n   * @throws {Error} - Throws an error if the pattern is not an instance of UrlPattern.\n   */\n  urlPattern(pattern) {\n    if (!(pattern instanceof UrlPattern)) {\n      throw new Error(`Pattern must be an instance of UrlPattern. Received: '${pattern})'`);\n    }\n    this.#urlPatterns.push(Object.fromEntries(pattern.asMap()));\n    return this;\n  }\n\n  /**\n   * Adds array of URL patterns to intercept.\n   *\n   * @param {UrlPattern[]} patterns - An array of UrlPattern instances representing the URL patterns to intercept.\n   * @returns {AddInterceptParameters} - Returns the instance of AddInterceptParameters for chaining.\n   * @throws {Error} - Throws an error if the pattern is not an instance of UrlPattern.\n   */\n  urlPatterns(patterns) {\n    patterns.forEach(pattern => {\n      if (!(pattern instanceof UrlPattern)) {\n        throw new Error(`Pattern must be an instance of UrlPattern. Received:'${pattern}'`);\n      }\n      this.#urlPatterns.push(Object.fromEntries(pattern.asMap()));\n    });\n    return this;\n  }\n\n  /**\n   * Adds string URL to intercept.\n   *\n   * @param {string} pattern - The URL pattern to be added.\n   * @returns {AddInterceptParameters} - Returns the instance of AddInterceptParameters for chaining..\n   * @throws {Error} - If the pattern is not an instance of String.\n   */\n  urlStringPattern(pattern) {\n    if (typeof pattern !== 'string') {\n      throw new Error(`Pattern must be an instance of String. Received:'${pattern}'`);\n    }\n    this.#urlPatterns.push({\n      type: 'string',\n      pattern: pattern\n    });\n    return this;\n  }\n\n  /**\n   * Adds array of string URLs to intercept.\n   * @param {string[]} patterns - An array of URL string patterns.\n   * @returns {this} - Returns the instance of AddInterceptParameters for chaining.\n   */\n  urlStringPatterns(patterns) {\n    patterns.forEach(pattern => {\n      if (typeof pattern !== 'string') {\n        throw new Error(`Pattern must be an instance of String. Received:'${pattern}'`);\n      }\n      this.#urlPatterns.push({\n        type: 'string',\n        pattern: pattern\n      });\n    });\n    return this;\n  }\n  asMap() {\n    const map = new Map();\n    map.set('phases', this.#phases);\n    if (this.#urlPatterns.length > 0) {\n      map.set('urlPatterns', this.#urlPatterns);\n    }\n    return map;\n  }\n}\nmodule.exports = {\n  AddInterceptParameters\n};","map":{"version":3,"names":["UrlPattern","require","AddInterceptParameters","phases","urlPatterns","constructor","Array","forEach","phase","push","urlPattern","pattern","Error","Object","fromEntries","asMap","patterns","urlStringPattern","type","urlStringPatterns","map","Map","set","length","module","exports"],"sources":["C:/Users/rayan/Documents/GitHub/Project-Outils/node_modules/selenium-webdriver/bidi/addInterceptParameters.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst { UrlPattern } = require('./urlPattern')\n\nclass AddInterceptParameters {\n  #phases = []\n  #urlPatterns = []\n\n  constructor(phases) {\n    if (phases instanceof Array) {\n      phases.forEach((phase) => this.#phases.push(phase))\n    } else {\n      this.#phases.push(phases)\n    }\n  }\n\n  /**\n   * Adds a URL pattern to intercept.\n   *\n   * @param {UrlPattern} pattern - The URL pattern to add.\n   * @returns {AddInterceptParameters} - Returns the current instance of the class AddInterceptParameters for chaining.\n   * @throws {Error} - Throws an error if the pattern is not an instance of UrlPattern.\n   */\n  urlPattern(pattern) {\n    if (!(pattern instanceof UrlPattern)) {\n      throw new Error(`Pattern must be an instance of UrlPattern. Received: '${pattern})'`)\n    }\n    this.#urlPatterns.push(Object.fromEntries(pattern.asMap()))\n    return this\n  }\n\n  /**\n   * Adds array of URL patterns to intercept.\n   *\n   * @param {UrlPattern[]} patterns - An array of UrlPattern instances representing the URL patterns to intercept.\n   * @returns {AddInterceptParameters} - Returns the instance of AddInterceptParameters for chaining.\n   * @throws {Error} - Throws an error if the pattern is not an instance of UrlPattern.\n   */\n  urlPatterns(patterns) {\n    patterns.forEach((pattern) => {\n      if (!(pattern instanceof UrlPattern)) {\n        throw new Error(`Pattern must be an instance of UrlPattern. Received:'${pattern}'`)\n      }\n      this.#urlPatterns.push(Object.fromEntries(pattern.asMap()))\n    })\n    return this\n  }\n\n  /**\n   * Adds string URL to intercept.\n   *\n   * @param {string} pattern - The URL pattern to be added.\n   * @returns {AddInterceptParameters} - Returns the instance of AddInterceptParameters for chaining..\n   * @throws {Error} - If the pattern is not an instance of String.\n   */\n  urlStringPattern(pattern) {\n    if (typeof pattern !== 'string') {\n      throw new Error(`Pattern must be an instance of String. Received:'${pattern}'`)\n    }\n\n    this.#urlPatterns.push({ type: 'string', pattern: pattern })\n    return this\n  }\n\n  /**\n   * Adds array of string URLs to intercept.\n   * @param {string[]} patterns - An array of URL string patterns.\n   * @returns {this} - Returns the instance of AddInterceptParameters for chaining.\n   */\n  urlStringPatterns(patterns) {\n    patterns.forEach((pattern) => {\n      if (typeof pattern !== 'string') {\n        throw new Error(`Pattern must be an instance of String. Received:'${pattern}'`)\n      }\n      this.#urlPatterns.push({ type: 'string', pattern: pattern })\n    })\n    return this\n  }\n\n  asMap() {\n    const map = new Map()\n    map.set('phases', this.#phases)\n    if (this.#urlPatterns.length > 0) {\n      map.set('urlPatterns', this.#urlPatterns)\n    }\n\n    return map\n  }\n}\n\nmodule.exports = { AddInterceptParameters }\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;EAAEA;AAAW,CAAC,GAAGC,OAAO,CAAC,cAAc,CAAC;AAE9C,MAAMC,sBAAsB,CAAC;EAC3B,CAACC,MAAM,GAAG,EAAE;EACZ,CAACC,WAAW,GAAG,EAAE;EAEjBC,WAAWA,CAACF,MAAM,EAAE;IAClB,IAAIA,MAAM,YAAYG,KAAK,EAAE;MAC3BH,MAAM,CAACI,OAAO,CAAEC,KAAK,IAAK,IAAI,CAAC,CAACL,MAAM,CAACM,IAAI,CAACD,KAAK,CAAC,CAAC;IACrD,CAAC,MAAM;MACL,IAAI,CAAC,CAACL,MAAM,CAACM,IAAI,CAACN,MAAM,CAAC;IAC3B;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEO,UAAUA,CAACC,OAAO,EAAE;IAClB,IAAI,EAAEA,OAAO,YAAYX,UAAU,CAAC,EAAE;MACpC,MAAM,IAAIY,KAAK,CAAC,yDAAyDD,OAAO,IAAI,CAAC;IACvF;IACA,IAAI,CAAC,CAACP,WAAW,CAACK,IAAI,CAACI,MAAM,CAACC,WAAW,CAACH,OAAO,CAACI,KAAK,CAAC,CAAC,CAAC,CAAC;IAC3D,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEX,WAAWA,CAACY,QAAQ,EAAE;IACpBA,QAAQ,CAACT,OAAO,CAAEI,OAAO,IAAK;MAC5B,IAAI,EAAEA,OAAO,YAAYX,UAAU,CAAC,EAAE;QACpC,MAAM,IAAIY,KAAK,CAAC,wDAAwDD,OAAO,GAAG,CAAC;MACrF;MACA,IAAI,CAAC,CAACP,WAAW,CAACK,IAAI,CAACI,MAAM,CAACC,WAAW,CAACH,OAAO,CAACI,KAAK,CAAC,CAAC,CAAC,CAAC;IAC7D,CAAC,CAAC;IACF,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEE,gBAAgBA,CAACN,OAAO,EAAE;IACxB,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;MAC/B,MAAM,IAAIC,KAAK,CAAC,oDAAoDD,OAAO,GAAG,CAAC;IACjF;IAEA,IAAI,CAAC,CAACP,WAAW,CAACK,IAAI,CAAC;MAAES,IAAI,EAAE,QAAQ;MAAEP,OAAO,EAAEA;IAAQ,CAAC,CAAC;IAC5D,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;EACEQ,iBAAiBA,CAACH,QAAQ,EAAE;IAC1BA,QAAQ,CAACT,OAAO,CAAEI,OAAO,IAAK;MAC5B,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;QAC/B,MAAM,IAAIC,KAAK,CAAC,oDAAoDD,OAAO,GAAG,CAAC;MACjF;MACA,IAAI,CAAC,CAACP,WAAW,CAACK,IAAI,CAAC;QAAES,IAAI,EAAE,QAAQ;QAAEP,OAAO,EAAEA;MAAQ,CAAC,CAAC;IAC9D,CAAC,CAAC;IACF,OAAO,IAAI;EACb;EAEAI,KAAKA,CAAA,EAAG;IACN,MAAMK,GAAG,GAAG,IAAIC,GAAG,CAAC,CAAC;IACrBD,GAAG,CAACE,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAACnB,MAAM,CAAC;IAC/B,IAAI,IAAI,CAAC,CAACC,WAAW,CAACmB,MAAM,GAAG,CAAC,EAAE;MAChCH,GAAG,CAACE,GAAG,CAAC,aAAa,EAAE,IAAI,CAAC,CAAClB,WAAW,CAAC;IAC3C;IAEA,OAAOgB,GAAG;EACZ;AACF;AAEAI,MAAM,CAACC,OAAO,GAAG;EAAEvB;AAAuB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}