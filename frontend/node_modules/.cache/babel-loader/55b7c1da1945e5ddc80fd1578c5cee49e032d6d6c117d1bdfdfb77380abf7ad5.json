{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst {\n  Header\n} = require('./networkTypes');\n\n/**\n * Represents the parameters for a continue response.\n * Described in https://w3c.github.io/webdriver-bidi/#command-network-continueResponse.\n */\nclass ContinueResponseParameters {\n  #map = new Map();\n  constructor(request) {\n    this.#map.set('request', request);\n  }\n\n  /**\n   * Sets the cookies for the response.\n   *\n   * @param {Header[]} cookieHeaders - The array of cookie headers.\n   * @returns {ContinueResponseParameters} - The current instance of the ContinueResponseParameters for chaining.\n   * @throws {Error} - If the cookieHeader is not an instance of Header.\n   */\n  cookies(cookieHeaders) {\n    const cookies = [];\n    cookieHeaders.forEach(header => {\n      if (!(header instanceof Header)) {\n        throw new Error(`CookieHeader must be an instance of Header. Received:'${header}'`);\n      }\n      cookies.push(Object.fromEntries(header.asMap()));\n    });\n    this.#map.set('cookies', cookies);\n    return this;\n  }\n\n  /**\n   * Sets the credentials for authentication.\n   *\n   * @param {string} username - The username for authentication.\n   * @param {string} password - The password for authentication.\n   * @returns {ContinueResponseParameters} The current instance of the ContinueResponseParameters for chaining.\n   * @throws {Error} If username or password is not a string.\n   */\n  credentials(username, password) {\n    if (typeof username !== 'string') {\n      throw new Error(`Username must be a string. Received:'${username}'`);\n    }\n    if (typeof password !== 'string') {\n      throw new Error(`Password must be a string. Received:'${password}'`);\n    }\n    this.#map.set('credentials', {\n      type: 'password',\n      username: username,\n      password: password\n    });\n    return this;\n  }\n\n  /**\n   * Sets the headers for the response.\n   *\n   * @param {Header[]} headers - An array of Header objects representing the headers.\n   * @returns {ContinueResponseParameters} - The current instance of the ContinueResponseParameters for chaining.\n   * @throws {Error} - If the header value is not an instance of Header.\n   */\n  headers(headers) {\n    const headerList = [];\n    headers.forEach(header => {\n      if (!(header instanceof Header)) {\n        throw new Error(`Header value must be an instance of Header. Received:'${header}'`);\n      }\n      headerList.push(Object.fromEntries(header.asMap()));\n    });\n    this.#map.set('headers', headerList);\n    return this;\n  }\n\n  /**\n   * Sets the reason phrase for the response.\n   *\n   * @param {string} reasonPhrase - The reason phrase for the response.\n   * @returns {ContinueResponseParameters} - The current instance of the ContinueResponseParameters for chaining.\n   * @throws {Error} - If the reason phrase is not a string.\n   */\n  reasonPhrase(reasonPhrase) {\n    if (typeof reasonPhrase !== 'string') {\n      throw new Error(`Reason phrase must be a string. Received: '${reasonPhrase})'`);\n    }\n    this.#map.set('reasonPhrase', reasonPhrase);\n    return this;\n  }\n\n  /**\n   * Sets the status code for the response.\n   *\n   * @param {number} statusCode - The status code to set.\n   * @returns {ContinueResponseParameters} - The current instance of the ContinueResponseParameters for chaining.\n   * @throws {Error} - If the `statusCode` parameter is not an integer.\n   */\n  statusCode(statusCode) {\n    if (!Number.isInteger(statusCode)) {\n      throw new Error(`Status must be an integer. Received:'${statusCode}'`);\n    }\n    this.#map.set('statusCode', statusCode);\n    return this;\n  }\n  asMap() {\n    return this.#map;\n  }\n}\nmodule.exports = {\n  ContinueResponseParameters\n};","map":{"version":3,"names":["Header","require","ContinueResponseParameters","map","Map","constructor","request","set","cookies","cookieHeaders","forEach","header","Error","push","Object","fromEntries","asMap","credentials","username","password","type","headers","headerList","reasonPhrase","statusCode","Number","isInteger","module","exports"],"sources":["C:/Users/rayan/Documents/GitHub/Project-Outils/node_modules/selenium-webdriver/bidi/continueResponseParameters.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst { Header } = require('./networkTypes')\n\n/**\n * Represents the parameters for a continue response.\n * Described in https://w3c.github.io/webdriver-bidi/#command-network-continueResponse.\n */\nclass ContinueResponseParameters {\n  #map = new Map()\n\n  constructor(request) {\n    this.#map.set('request', request)\n  }\n\n  /**\n   * Sets the cookies for the response.\n   *\n   * @param {Header[]} cookieHeaders - The array of cookie headers.\n   * @returns {ContinueResponseParameters} - The current instance of the ContinueResponseParameters for chaining.\n   * @throws {Error} - If the cookieHeader is not an instance of Header.\n   */\n  cookies(cookieHeaders) {\n    const cookies = []\n    cookieHeaders.forEach((header) => {\n      if (!(header instanceof Header)) {\n        throw new Error(`CookieHeader must be an instance of Header. Received:'${header}'`)\n      }\n      cookies.push(Object.fromEntries(header.asMap()))\n    })\n\n    this.#map.set('cookies', cookies)\n    return this\n  }\n\n  /**\n   * Sets the credentials for authentication.\n   *\n   * @param {string} username - The username for authentication.\n   * @param {string} password - The password for authentication.\n   * @returns {ContinueResponseParameters} The current instance of the ContinueResponseParameters for chaining.\n   * @throws {Error} If username or password is not a string.\n   */\n  credentials(username, password) {\n    if (typeof username !== 'string') {\n      throw new Error(`Username must be a string. Received:'${username}'`)\n    }\n\n    if (typeof password !== 'string') {\n      throw new Error(`Password must be a string. Received:'${password}'`)\n    }\n\n    this.#map.set('credentials', { type: 'password', username: username, password: password })\n\n    return this\n  }\n\n  /**\n   * Sets the headers for the response.\n   *\n   * @param {Header[]} headers - An array of Header objects representing the headers.\n   * @returns {ContinueResponseParameters} - The current instance of the ContinueResponseParameters for chaining.\n   * @throws {Error} - If the header value is not an instance of Header.\n   */\n  headers(headers) {\n    const headerList = []\n    headers.forEach((header) => {\n      if (!(header instanceof Header)) {\n        throw new Error(`Header value must be an instance of Header. Received:'${header}'`)\n      }\n      headerList.push(Object.fromEntries(header.asMap()))\n    })\n\n    this.#map.set('headers', headerList)\n    return this\n  }\n\n  /**\n   * Sets the reason phrase for the response.\n   *\n   * @param {string} reasonPhrase - The reason phrase for the response.\n   * @returns {ContinueResponseParameters} - The current instance of the ContinueResponseParameters for chaining.\n   * @throws {Error} - If the reason phrase is not a string.\n   */\n  reasonPhrase(reasonPhrase) {\n    if (typeof reasonPhrase !== 'string') {\n      throw new Error(`Reason phrase must be a string. Received: '${reasonPhrase})'`)\n    }\n    this.#map.set('reasonPhrase', reasonPhrase)\n    return this\n  }\n\n  /**\n   * Sets the status code for the response.\n   *\n   * @param {number} statusCode - The status code to set.\n   * @returns {ContinueResponseParameters} - The current instance of the ContinueResponseParameters for chaining.\n   * @throws {Error} - If the `statusCode` parameter is not an integer.\n   */\n  statusCode(statusCode) {\n    if (!Number.isInteger(statusCode)) {\n      throw new Error(`Status must be an integer. Received:'${statusCode}'`)\n    }\n\n    this.#map.set('statusCode', statusCode)\n    return this\n  }\n\n  asMap() {\n    return this.#map\n  }\n}\n\nmodule.exports = { ContinueResponseParameters }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}