{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst {\n  PrimitiveType,\n  NonPrimitiveType,\n  RemoteType,\n  SpecialNumberType\n} = require('./protocolType');\nconst TYPE_CONSTANT = 'type';\nconst VALUE_CONSTANT = 'value';\n/**\n * Represents the types of remote reference.\n * @enum {string}\n */\nconst RemoteReferenceType = {\n  HANDLE: 'handle',\n  SHARED_ID: 'sharedId'\n};\n\n/**\n * Represents a local value with a specified type and optional value.\n * @class\n * Described in https://w3c.github.io/webdriver-bidi/#type-script-LocalValue\n */\nclass LocalValue {\n  constructor(type, value = null) {\n    if (type === PrimitiveType.UNDEFINED || type === PrimitiveType.NULL) {\n      this.type = type;\n    } else {\n      this.type = type;\n      this.value = value;\n    }\n  }\n\n  /**\n   * Creates a new LocalValue object with a string value.\n   *\n   * @param {string} value - The string value to be stored in the LocalValue object.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createStringValue(value) {\n    return new LocalValue(PrimitiveType.STRING, value);\n  }\n\n  /**\n   * Creates a new LocalValue object with a number value.\n   *\n   * @param {number} value - The number value.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createNumberValue(value) {\n    return new LocalValue(PrimitiveType.NUMBER, value);\n  }\n\n  /**\n   * Creates a new LocalValue object with a special number value.\n   *\n   * @param {number} value - The value of the special number.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createSpecialNumberValue(value) {\n    return new LocalValue(PrimitiveType.SPECIAL_NUMBER, value);\n  }\n\n  /**\n   * Creates a new LocalValue object with an undefined value.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createUndefinedValue() {\n    return new LocalValue(PrimitiveType.UNDEFINED);\n  }\n\n  /**\n   * Creates a new LocalValue object with a null value.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createNullValue() {\n    return new LocalValue(PrimitiveType.NULL);\n  }\n\n  /**\n   * Creates a new LocalValue object with a boolean value.\n   *\n   * @param {boolean} value - The boolean value.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createBooleanValue(value) {\n    return new LocalValue(PrimitiveType.BOOLEAN, value);\n  }\n\n  /**\n   * Creates a new LocalValue object with a BigInt value.\n   *\n   * @param {BigInt} value - The BigInt value.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createBigIntValue(value) {\n    return new LocalValue(PrimitiveType.BIGINT, value);\n  }\n\n  /**\n   * Creates a new LocalValue object with an array.\n   *\n   * @param {Array} value - The array.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createArrayValue(value) {\n    return new LocalValue(NonPrimitiveType.ARRAY, value);\n  }\n\n  /**\n   * Creates a new LocalValue object with date value.\n   *\n   * @param {string} value - The date.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createDateValue(value) {\n    return new LocalValue(NonPrimitiveType.DATE, value);\n  }\n\n  /**\n   * Creates a new LocalValue object of map value.\n   * @param {Map} map - The map.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createMapValue(map) {\n    let value = [];\n    Object.entries(map).forEach(entry => {\n      value.push(entry);\n    });\n    return new LocalValue(NonPrimitiveType.MAP, value);\n  }\n\n  /**\n   * Creates a new LocalValue object from the passed object.\n   *\n   * @param {Object} object - The object.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createObjectValue(object) {\n    let value = [];\n    Object.entries(object).forEach(entry => {\n      value.push(entry);\n    });\n    return new LocalValue(NonPrimitiveType.OBJECT, value);\n  }\n\n  /**\n   * Creates a new LocalValue object of regular expression value.\n   *\n   * @param {string} value - The value of the regular expression.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createRegularExpressionValue(value) {\n    return new LocalValue(NonPrimitiveType.REGULAR_EXPRESSION, value);\n  }\n\n  /**\n   * Creates a new LocalValue object with the specified value.\n   * @param {Set} value - The value to be set.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createSetValue(value) {\n    return new LocalValue(NonPrimitiveType.SET, value);\n  }\n\n  /**\n   * Creates a new LocalValue object with the given channel value\n   *\n   * @param {ChannelValue} value - The channel value.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createChannelValue(value) {\n    return new LocalValue(NonPrimitiveType.CHANNEL, value);\n  }\n  static createReferenceValue(handle, sharedId) {\n    return new ReferenceValue(handle, sharedId);\n  }\n  static getArgument(argument) {\n    let localValue = null;\n    if (argument === SpecialNumberType.NAN || argument === SpecialNumberType.MINUS_ZERO || argument === SpecialNumberType.INFINITY || argument === SpecialNumberType.MINUS_INFINITY) {\n      localValue = LocalValue.createSpecialNumberValue(argument);\n      return localValue;\n    }\n    const type = typeof argument;\n    switch (type) {\n      case PrimitiveType.STRING:\n        localValue = LocalValue.createStringValue(argument);\n        break;\n      case PrimitiveType.NUMBER:\n        localValue = LocalValue.createNumberValue(argument);\n        break;\n      case PrimitiveType.BOOLEAN:\n        localValue = LocalValue.createBooleanValue(argument);\n        break;\n      case PrimitiveType.BIGINT:\n        localValue = LocalValue.createBigIntValue(argument.toString());\n        break;\n      case PrimitiveType.UNDEFINED:\n        localValue = LocalValue.createUndefinedValue();\n        break;\n      case NonPrimitiveType.OBJECT:\n        if (argument === null) {\n          localValue = LocalValue.createNullValue();\n          break;\n        }\n        if (argument instanceof Date) {\n          localValue = LocalValue.createDateValue(argument);\n        } else if (argument instanceof Map) {\n          const map = [];\n          argument.forEach((value, key) => {\n            let objectKey;\n            if (typeof key === 'string') {\n              objectKey = key;\n            } else {\n              objectKey = LocalValue.getArgument(key);\n            }\n            const objectValue = LocalValue.getArgument(value);\n            map.push([objectKey, objectValue]);\n          });\n          localValue = new LocalValue(NonPrimitiveType.MAP, map);\n        } else if (argument instanceof Set) {\n          const set = [];\n          argument.forEach(value => {\n            set.push(LocalValue.getArgument(value));\n          });\n          localValue = LocalValue.createSetValue(set);\n        } else if (argument instanceof Array) {\n          const arr = [];\n          argument.forEach(value => {\n            arr.push(LocalValue.getArgument(value));\n          });\n          localValue = LocalValue.createArrayValue(arr);\n        } else if (argument instanceof RegExp) {\n          localValue = LocalValue.createRegularExpressionValue({\n            pattern: argument.source,\n            flags: argument.flags\n          });\n        } else {\n          let value = [];\n          Object.entries(argument).forEach(entry => {\n            value.push([LocalValue.getArgument(entry[0]), LocalValue.getArgument(entry[1])]);\n          });\n          localValue = new LocalValue(NonPrimitiveType.OBJECT, value);\n        }\n        break;\n    }\n    return localValue;\n  }\n  asMap() {\n    let toReturn = {};\n    toReturn[TYPE_CONSTANT] = this.type;\n    if (!(this.type === PrimitiveType.NULL || this.type === PrimitiveType.UNDEFINED)) {\n      toReturn[VALUE_CONSTANT] = this.value;\n    }\n    return toReturn;\n  }\n}\n\n/**\n * Represents a remote value.\n * Described in https://w3c.github.io/webdriver-bidi/#type-script-RemoteValue.\n * @class\n */\nclass RemoteValue {\n  constructor(remoteValue) {\n    this.type = null;\n    this.handle = null;\n    this.internalId = null;\n    this.value = null;\n    this.sharedId = null;\n    if ('type' in remoteValue) {\n      const typeString = remoteValue['type'];\n      if (PrimitiveType.findByName(typeString) != null) {\n        this.type = PrimitiveType.findByName(typeString);\n      } else if (NonPrimitiveType.findByName(typeString) != null) {\n        this.type = NonPrimitiveType.findByName(typeString);\n      } else {\n        this.type = RemoteType.findByName(typeString);\n      }\n    }\n    if ('handle' in remoteValue) {\n      this.handle = remoteValue['handle'];\n    }\n    if ('internalId' in remoteValue) {\n      this.internalId = remoteValue['internalId'];\n    }\n    if ('value' in remoteValue) {\n      this.value = remoteValue['value'];\n    }\n    if ('sharedId' in remoteValue) {\n      this.sharedId = remoteValue['sharedId'];\n    }\n    if (this.value != null) {\n      this.value = this.deserializeValue(this.value, this.type);\n    }\n  }\n  deserializeValue(value, type) {\n    if (type === NonPrimitiveType.OBJECT) {\n      return Object.fromEntries(value);\n    } else if (type === NonPrimitiveType.REGULAR_EXPRESSION) {\n      return new RegExpValue(value.pattern, value.flags);\n    }\n    return value;\n  }\n}\n\n/**\n * Represents a reference value in the protocol.\n * Described in https://w3c.github.io/webdriver-bidi/#type-script-RemoteReference.\n */\nclass ReferenceValue {\n  #handle;\n  #sharedId;\n\n  /**\n   * Constructs a new ReferenceValue object.\n   * @param {string} handle - The handle value.\n   * @param {string} sharedId - The shared ID value.\n   */\n  constructor(handle, sharedId) {\n    if (handle === RemoteReferenceType.HANDLE) {\n      this.#handle = sharedId;\n    } else if (handle === RemoteReferenceType.SHARED_ID) {\n      this.#sharedId = sharedId;\n    } else {\n      this.#handle = handle;\n      this.#sharedId = sharedId;\n    }\n  }\n  asMap() {\n    const toReturn = {};\n    if (this.#handle != null) {\n      toReturn[RemoteReferenceType.HANDLE] = this.#handle;\n    }\n    if (this.#sharedId != null) {\n      toReturn[RemoteReferenceType.SHARED_ID] = this.#sharedId;\n    }\n    return toReturn;\n  }\n}\n\n/**\n * Represents a regular expression value.\n * Described in https://w3c.github.io/webdriver-bidi/#type-script-LocalValue.\n */\nclass RegExpValue {\n  /**\n   * Constructs a new RegExpValue object.\n   * @param {string} pattern - The pattern of the regular expression.\n   * @param {string|null} [flags=null] - The flags of the regular expression.\n   */\n  constructor(pattern, flags = null) {\n    this.pattern = pattern;\n    this.flags = flags;\n  }\n}\n\n/**\n * Represents serialization options.\n * Described in https://w3c.github.io/webdriver-bidi/#type-script-SerializationOptions.\n */\nclass SerializationOptions {\n  /**\n   * Constructs a new instance of SerializationOptions.\n   * @param {number} [maxDomDepth=0] - The maximum depth to serialize the DOM.\n   * @param {number|null} [maxObjectDepth=null] - The maximum depth to serialize objects.\n   * @param {'none'|'open'|'all'} [includeShadowTree='none'] - The inclusion level of the shadow tree.\n   * @throws {Error} If the `includeShadowTree` value is not one of 'none', 'open', or 'all'.\n   */\n  constructor(maxDomDepth = 0, maxObjectDepth = null, includeShadowTree = 'none') {\n    this._maxDomDepth = maxDomDepth;\n    this._maxObjectDepth = maxObjectDepth;\n    if (['none', 'open', 'all'].includes(includeShadowTree)) {\n      throw Error(`Valid types are 'none', 'open', and 'all'. Received: ${includeShadowTree}`);\n    }\n    this._includeShadowTree = includeShadowTree;\n  }\n}\n\n/**\n * Represents a channel value.\n * Described in https://w3c.github.io/webdriver-bidi/#type-script-ChannelValue.\n * @class\n */\nclass ChannelValue {\n  constructor(channel, options = undefined, resultOwnership = undefined) {\n    this.channel = channel;\n    if (options !== undefined) {\n      if (options instanceof SerializationOptions) {\n        this.options = options;\n      } else {\n        throw Error(`Pass in SerializationOptions object. Received: ${options} `);\n      }\n    }\n    if (resultOwnership !== undefined) {\n      if (['root', 'none'].includes(resultOwnership)) {\n        this.resultOwnership = resultOwnership;\n      } else {\n        throw Error(`Valid types are 'root' and 'none. Received: ${resultOwnership}`);\n      }\n    }\n  }\n}\nmodule.exports = {\n  ChannelValue,\n  LocalValue,\n  RemoteValue,\n  ReferenceValue,\n  RemoteReferenceType,\n  RegExpValue,\n  SerializationOptions\n};","map":{"version":3,"names":["PrimitiveType","NonPrimitiveType","RemoteType","SpecialNumberType","require","TYPE_CONSTANT","VALUE_CONSTANT","RemoteReferenceType","HANDLE","SHARED_ID","LocalValue","constructor","type","value","UNDEFINED","NULL","createStringValue","STRING","createNumberValue","NUMBER","createSpecialNumberValue","SPECIAL_NUMBER","createUndefinedValue","createNullValue","createBooleanValue","BOOLEAN","createBigIntValue","BIGINT","createArrayValue","ARRAY","createDateValue","DATE","createMapValue","map","Object","entries","forEach","entry","push","MAP","createObjectValue","object","OBJECT","createRegularExpressionValue","REGULAR_EXPRESSION","createSetValue","SET","createChannelValue","CHANNEL","createReferenceValue","handle","sharedId","ReferenceValue","getArgument","argument","localValue","NAN","MINUS_ZERO","INFINITY","MINUS_INFINITY","toString","Date","Map","key","objectKey","objectValue","Set","set","Array","arr","RegExp","pattern","source","flags","asMap","toReturn","RemoteValue","remoteValue","internalId","typeString","findByName","deserializeValue","fromEntries","RegExpValue","SerializationOptions","maxDomDepth","maxObjectDepth","includeShadowTree","_maxDomDepth","_maxObjectDepth","includes","Error","_includeShadowTree","ChannelValue","channel","options","undefined","resultOwnership","module","exports"],"sources":["C:/Users/rayan/Documents/GitHub/Project-Outils/node_modules/selenium-webdriver/bidi/protocolValue.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst { PrimitiveType, NonPrimitiveType, RemoteType, SpecialNumberType } = require('./protocolType')\n\nconst TYPE_CONSTANT = 'type'\nconst VALUE_CONSTANT = 'value'\n/**\n * Represents the types of remote reference.\n * @enum {string}\n */\nconst RemoteReferenceType = {\n  HANDLE: 'handle',\n  SHARED_ID: 'sharedId',\n}\n\n/**\n * Represents a local value with a specified type and optional value.\n * @class\n * Described in https://w3c.github.io/webdriver-bidi/#type-script-LocalValue\n */\nclass LocalValue {\n  constructor(type, value = null) {\n    if (type === PrimitiveType.UNDEFINED || type === PrimitiveType.NULL) {\n      this.type = type\n    } else {\n      this.type = type\n      this.value = value\n    }\n  }\n\n  /**\n   * Creates a new LocalValue object with a string value.\n   *\n   * @param {string} value - The string value to be stored in the LocalValue object.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createStringValue(value) {\n    return new LocalValue(PrimitiveType.STRING, value)\n  }\n\n  /**\n   * Creates a new LocalValue object with a number value.\n   *\n   * @param {number} value - The number value.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createNumberValue(value) {\n    return new LocalValue(PrimitiveType.NUMBER, value)\n  }\n\n  /**\n   * Creates a new LocalValue object with a special number value.\n   *\n   * @param {number} value - The value of the special number.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createSpecialNumberValue(value) {\n    return new LocalValue(PrimitiveType.SPECIAL_NUMBER, value)\n  }\n\n  /**\n   * Creates a new LocalValue object with an undefined value.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createUndefinedValue() {\n    return new LocalValue(PrimitiveType.UNDEFINED)\n  }\n\n  /**\n   * Creates a new LocalValue object with a null value.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createNullValue() {\n    return new LocalValue(PrimitiveType.NULL)\n  }\n\n  /**\n   * Creates a new LocalValue object with a boolean value.\n   *\n   * @param {boolean} value - The boolean value.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createBooleanValue(value) {\n    return new LocalValue(PrimitiveType.BOOLEAN, value)\n  }\n\n  /**\n   * Creates a new LocalValue object with a BigInt value.\n   *\n   * @param {BigInt} value - The BigInt value.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createBigIntValue(value) {\n    return new LocalValue(PrimitiveType.BIGINT, value)\n  }\n\n  /**\n   * Creates a new LocalValue object with an array.\n   *\n   * @param {Array} value - The array.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createArrayValue(value) {\n    return new LocalValue(NonPrimitiveType.ARRAY, value)\n  }\n\n  /**\n   * Creates a new LocalValue object with date value.\n   *\n   * @param {string} value - The date.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createDateValue(value) {\n    return new LocalValue(NonPrimitiveType.DATE, value)\n  }\n\n  /**\n   * Creates a new LocalValue object of map value.\n   * @param {Map} map - The map.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createMapValue(map) {\n    let value = []\n    Object.entries(map).forEach((entry) => {\n      value.push(entry)\n    })\n    return new LocalValue(NonPrimitiveType.MAP, value)\n  }\n\n  /**\n   * Creates a new LocalValue object from the passed object.\n   *\n   * @param {Object} object - The object.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createObjectValue(object) {\n    let value = []\n    Object.entries(object).forEach((entry) => {\n      value.push(entry)\n    })\n    return new LocalValue(NonPrimitiveType.OBJECT, value)\n  }\n\n  /**\n   * Creates a new LocalValue object of regular expression value.\n   *\n   * @param {string} value - The value of the regular expression.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createRegularExpressionValue(value) {\n    return new LocalValue(NonPrimitiveType.REGULAR_EXPRESSION, value)\n  }\n\n  /**\n   * Creates a new LocalValue object with the specified value.\n   * @param {Set} value - The value to be set.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createSetValue(value) {\n    return new LocalValue(NonPrimitiveType.SET, value)\n  }\n\n  /**\n   * Creates a new LocalValue object with the given channel value\n   *\n   * @param {ChannelValue} value - The channel value.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createChannelValue(value) {\n    return new LocalValue(NonPrimitiveType.CHANNEL, value)\n  }\n\n  static createReferenceValue(handle, sharedId) {\n    return new ReferenceValue(handle, sharedId)\n  }\n\n  static getArgument(argument) {\n    let localValue = null\n\n    if (\n      argument === SpecialNumberType.NAN ||\n      argument === SpecialNumberType.MINUS_ZERO ||\n      argument === SpecialNumberType.INFINITY ||\n      argument === SpecialNumberType.MINUS_INFINITY\n    ) {\n      localValue = LocalValue.createSpecialNumberValue(argument)\n      return localValue\n    }\n\n    const type = typeof argument\n\n    switch (type) {\n      case PrimitiveType.STRING:\n        localValue = LocalValue.createStringValue(argument)\n        break\n      case PrimitiveType.NUMBER:\n        localValue = LocalValue.createNumberValue(argument)\n        break\n      case PrimitiveType.BOOLEAN:\n        localValue = LocalValue.createBooleanValue(argument)\n        break\n      case PrimitiveType.BIGINT:\n        localValue = LocalValue.createBigIntValue(argument.toString())\n        break\n      case PrimitiveType.UNDEFINED:\n        localValue = LocalValue.createUndefinedValue()\n        break\n      case NonPrimitiveType.OBJECT:\n        if (argument === null) {\n          localValue = LocalValue.createNullValue()\n          break\n        }\n        if (argument instanceof Date) {\n          localValue = LocalValue.createDateValue(argument)\n        } else if (argument instanceof Map) {\n          const map = []\n\n          argument.forEach((value, key) => {\n            let objectKey\n            if (typeof key === 'string') {\n              objectKey = key\n            } else {\n              objectKey = LocalValue.getArgument(key)\n            }\n            const objectValue = LocalValue.getArgument(value)\n            map.push([objectKey, objectValue])\n          })\n          localValue = new LocalValue(NonPrimitiveType.MAP, map)\n        } else if (argument instanceof Set) {\n          const set = []\n          argument.forEach((value) => {\n            set.push(LocalValue.getArgument(value))\n          })\n          localValue = LocalValue.createSetValue(set)\n        } else if (argument instanceof Array) {\n          const arr = []\n          argument.forEach((value) => {\n            arr.push(LocalValue.getArgument(value))\n          })\n          localValue = LocalValue.createArrayValue(arr)\n        } else if (argument instanceof RegExp) {\n          localValue = LocalValue.createRegularExpressionValue({\n            pattern: argument.source,\n            flags: argument.flags,\n          })\n        } else {\n          let value = []\n          Object.entries(argument).forEach((entry) => {\n            value.push([LocalValue.getArgument(entry[0]), LocalValue.getArgument(entry[1])])\n          })\n          localValue = new LocalValue(NonPrimitiveType.OBJECT, value)\n        }\n        break\n    }\n\n    return localValue\n  }\n\n  asMap() {\n    let toReturn = {}\n    toReturn[TYPE_CONSTANT] = this.type\n\n    if (!(this.type === PrimitiveType.NULL || this.type === PrimitiveType.UNDEFINED)) {\n      toReturn[VALUE_CONSTANT] = this.value\n    }\n    return toReturn\n  }\n}\n\n/**\n * Represents a remote value.\n * Described in https://w3c.github.io/webdriver-bidi/#type-script-RemoteValue.\n * @class\n */\nclass RemoteValue {\n  constructor(remoteValue) {\n    this.type = null\n    this.handle = null\n    this.internalId = null\n    this.value = null\n    this.sharedId = null\n\n    if ('type' in remoteValue) {\n      const typeString = remoteValue['type']\n      if (PrimitiveType.findByName(typeString) != null) {\n        this.type = PrimitiveType.findByName(typeString)\n      } else if (NonPrimitiveType.findByName(typeString) != null) {\n        this.type = NonPrimitiveType.findByName(typeString)\n      } else {\n        this.type = RemoteType.findByName(typeString)\n      }\n    }\n\n    if ('handle' in remoteValue) {\n      this.handle = remoteValue['handle']\n    }\n\n    if ('internalId' in remoteValue) {\n      this.internalId = remoteValue['internalId']\n    }\n\n    if ('value' in remoteValue) {\n      this.value = remoteValue['value']\n    }\n\n    if ('sharedId' in remoteValue) {\n      this.sharedId = remoteValue['sharedId']\n    }\n\n    if (this.value != null) {\n      this.value = this.deserializeValue(this.value, this.type)\n    }\n  }\n\n  deserializeValue(value, type) {\n    if (type === NonPrimitiveType.OBJECT) {\n      return Object.fromEntries(value)\n    } else if (type === NonPrimitiveType.REGULAR_EXPRESSION) {\n      return new RegExpValue(value.pattern, value.flags)\n    }\n    return value\n  }\n}\n\n/**\n * Represents a reference value in the protocol.\n * Described in https://w3c.github.io/webdriver-bidi/#type-script-RemoteReference.\n */\nclass ReferenceValue {\n  #handle\n  #sharedId\n\n  /**\n   * Constructs a new ReferenceValue object.\n   * @param {string} handle - The handle value.\n   * @param {string} sharedId - The shared ID value.\n   */\n  constructor(handle, sharedId) {\n    if (handle === RemoteReferenceType.HANDLE) {\n      this.#handle = sharedId\n    } else if (handle === RemoteReferenceType.SHARED_ID) {\n      this.#sharedId = sharedId\n    } else {\n      this.#handle = handle\n      this.#sharedId = sharedId\n    }\n  }\n\n  asMap() {\n    const toReturn = {}\n    if (this.#handle != null) {\n      toReturn[RemoteReferenceType.HANDLE] = this.#handle\n    }\n\n    if (this.#sharedId != null) {\n      toReturn[RemoteReferenceType.SHARED_ID] = this.#sharedId\n    }\n\n    return toReturn\n  }\n}\n\n/**\n * Represents a regular expression value.\n * Described in https://w3c.github.io/webdriver-bidi/#type-script-LocalValue.\n */\nclass RegExpValue {\n  /**\n   * Constructs a new RegExpValue object.\n   * @param {string} pattern - The pattern of the regular expression.\n   * @param {string|null} [flags=null] - The flags of the regular expression.\n   */\n  constructor(pattern, flags = null) {\n    this.pattern = pattern\n    this.flags = flags\n  }\n}\n\n/**\n * Represents serialization options.\n * Described in https://w3c.github.io/webdriver-bidi/#type-script-SerializationOptions.\n */\nclass SerializationOptions {\n  /**\n   * Constructs a new instance of SerializationOptions.\n   * @param {number} [maxDomDepth=0] - The maximum depth to serialize the DOM.\n   * @param {number|null} [maxObjectDepth=null] - The maximum depth to serialize objects.\n   * @param {'none'|'open'|'all'} [includeShadowTree='none'] - The inclusion level of the shadow tree.\n   * @throws {Error} If the `includeShadowTree` value is not one of 'none', 'open', or 'all'.\n   */\n  constructor(maxDomDepth = 0, maxObjectDepth = null, includeShadowTree = 'none') {\n    this._maxDomDepth = maxDomDepth\n    this._maxObjectDepth = maxObjectDepth\n\n    if (['none', 'open', 'all'].includes(includeShadowTree)) {\n      throw Error(`Valid types are 'none', 'open', and 'all'. Received: ${includeShadowTree}`)\n    }\n    this._includeShadowTree = includeShadowTree\n  }\n}\n\n/**\n * Represents a channel value.\n * Described in https://w3c.github.io/webdriver-bidi/#type-script-ChannelValue.\n * @class\n */\nclass ChannelValue {\n  constructor(channel, options = undefined, resultOwnership = undefined) {\n    this.channel = channel\n\n    if (options !== undefined) {\n      if (options instanceof SerializationOptions) {\n        this.options = options\n      } else {\n        throw Error(`Pass in SerializationOptions object. Received: ${options} `)\n      }\n    }\n\n    if (resultOwnership !== undefined) {\n      if (['root', 'none'].includes(resultOwnership)) {\n        this.resultOwnership = resultOwnership\n      } else {\n        throw Error(`Valid types are 'root' and 'none. Received: ${resultOwnership}`)\n      }\n    }\n  }\n}\n\nmodule.exports = {\n  ChannelValue,\n  LocalValue,\n  RemoteValue,\n  ReferenceValue,\n  RemoteReferenceType,\n  RegExpValue,\n  SerializationOptions,\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}