{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n *  This implementation is still in beta, and may change.\n *\n *  Wrapper for getting information from the Selenium Manager binaries\n */\n\nconst {\n  platform\n} = require('node:process');\nconst path = require('node:path');\nconst fs = require('node:fs');\nconst spawnSync = require('node:child_process').spawnSync;\nconst logging = require('../lib/logging');\nconst log_ = logging.getLogger(logging.Type.DRIVER);\nlet debugMessagePrinted = false;\n\n/**\n * Determines the path of the correct Selenium Manager binary\n * @returns {string}\n */\nfunction getBinary() {\n  const directory = {\n    darwin: 'macos',\n    win32: 'windows',\n    cygwin: 'windows',\n    linux: 'linux'\n  }[platform];\n  const file = directory === 'windows' ? 'selenium-manager.exe' : 'selenium-manager';\n  let seleniumManagerBasePath = path.join(__dirname, '..', '/bin');\n  const filePath = process.env.SE_MANAGER_PATH || path.join(seleniumManagerBasePath, directory, file);\n  if (!fs.existsSync(filePath)) {\n    throw new Error(`Unable to obtain Selenium Manager at ${filePath}`);\n  }\n  if (!debugMessagePrinted) {\n    log_.debug(`Selenium Manager binary found at ${filePath}`);\n    debugMessagePrinted = true; // Set the flag to true after printing the debug message\n  }\n  return filePath;\n}\n\n/**\n * Determines the path of the correct driver\n * @param {string[]} args arguments to invoke Selenium Manager\n * @returns {{browserPath: string, driverPath: string}} path of the driver and\n * browser location\n */\n\nfunction binaryPaths(args) {\n  const smBinary = getBinary();\n  const spawnResult = spawnSync(smBinary, args);\n  let output;\n  if (spawnResult.status) {\n    let errorMessage;\n    if (spawnResult.stderr.toString()) {\n      errorMessage = spawnResult.stderr.toString();\n    }\n    if (spawnResult.stdout.toString()) {\n      try {\n        output = JSON.parse(spawnResult.stdout.toString());\n        logOutput(output);\n        errorMessage = output.result.message;\n      } catch (e) {\n        errorMessage = e.toString();\n      }\n    }\n    throw new Error(`Error executing command for ${smBinary} with ${args}: ${errorMessage}`);\n  }\n  try {\n    output = JSON.parse(spawnResult.stdout.toString());\n  } catch (e) {\n    throw new Error(`Error executing command for ${smBinary} with ${args}: ${e.toString()}`);\n  }\n  logOutput(output);\n  return {\n    driverPath: output.result.driver_path,\n    browserPath: output.result.browser_path\n  };\n}\nfunction logOutput(output) {\n  for (const key in output.logs) {\n    if (output.logs[key].level === 'WARN') {\n      log_.warning(`${output.logs[key].message}`);\n    }\n    if (['DEBUG', 'INFO'].includes(output.logs[key].level)) {\n      log_.debug(`${output.logs[key].message}`);\n    }\n  }\n}\n\n// PUBLIC API\nmodule.exports = {\n  binaryPaths\n};","map":{"version":3,"names":["platform","require","path","fs","spawnSync","logging","log_","getLogger","Type","DRIVER","debugMessagePrinted","getBinary","directory","darwin","win32","cygwin","linux","file","seleniumManagerBasePath","join","__dirname","filePath","process","env","SE_MANAGER_PATH","existsSync","Error","debug","binaryPaths","args","smBinary","spawnResult","output","status","errorMessage","stderr","toString","stdout","JSON","parse","logOutput","result","message","e","driverPath","driver_path","browserPath","browser_path","key","logs","level","warning","includes","module","exports"],"sources":["C:/Users/rayan/Documents/GitHub/Project-Outils/node_modules/selenium-webdriver/common/seleniumManager.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n *  This implementation is still in beta, and may change.\n *\n *  Wrapper for getting information from the Selenium Manager binaries\n */\n\nconst { platform } = require('node:process')\nconst path = require('node:path')\nconst fs = require('node:fs')\nconst spawnSync = require('node:child_process').spawnSync\nconst logging = require('../lib/logging')\n\nconst log_ = logging.getLogger(logging.Type.DRIVER)\nlet debugMessagePrinted = false\n\n/**\n * Determines the path of the correct Selenium Manager binary\n * @returns {string}\n */\nfunction getBinary() {\n  const directory = {\n    darwin: 'macos',\n    win32: 'windows',\n    cygwin: 'windows',\n    linux: 'linux',\n  }[platform]\n\n  const file = directory === 'windows' ? 'selenium-manager.exe' : 'selenium-manager'\n\n  let seleniumManagerBasePath = path.join(__dirname, '..', '/bin')\n\n  const filePath = process.env.SE_MANAGER_PATH || path.join(seleniumManagerBasePath, directory, file)\n\n  if (!fs.existsSync(filePath)) {\n    throw new Error(`Unable to obtain Selenium Manager at ${filePath}`)\n  }\n\n  if (!debugMessagePrinted) {\n    log_.debug(`Selenium Manager binary found at ${filePath}`)\n    debugMessagePrinted = true // Set the flag to true after printing the debug message\n  }\n\n  return filePath\n}\n\n/**\n * Determines the path of the correct driver\n * @param {string[]} args arguments to invoke Selenium Manager\n * @returns {{browserPath: string, driverPath: string}} path of the driver and\n * browser location\n */\n\nfunction binaryPaths(args) {\n  const smBinary = getBinary()\n  const spawnResult = spawnSync(smBinary, args)\n  let output\n  if (spawnResult.status) {\n    let errorMessage\n    if (spawnResult.stderr.toString()) {\n      errorMessage = spawnResult.stderr.toString()\n    }\n    if (spawnResult.stdout.toString()) {\n      try {\n        output = JSON.parse(spawnResult.stdout.toString())\n        logOutput(output)\n        errorMessage = output.result.message\n      } catch (e) {\n        errorMessage = e.toString()\n      }\n    }\n    throw new Error(`Error executing command for ${smBinary} with ${args}: ${errorMessage}`)\n  }\n  try {\n    output = JSON.parse(spawnResult.stdout.toString())\n  } catch (e) {\n    throw new Error(`Error executing command for ${smBinary} with ${args}: ${e.toString()}`)\n  }\n\n  logOutput(output)\n  return {\n    driverPath: output.result.driver_path,\n    browserPath: output.result.browser_path,\n  }\n}\n\nfunction logOutput(output) {\n  for (const key in output.logs) {\n    if (output.logs[key].level === 'WARN') {\n      log_.warning(`${output.logs[key].message}`)\n    }\n    if (['DEBUG', 'INFO'].includes(output.logs[key].level)) {\n      log_.debug(`${output.logs[key].message}`)\n    }\n  }\n}\n\n// PUBLIC API\nmodule.exports = { binaryPaths }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}