{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst {\n  BrowsingContextInfo,\n  NavigationInfo,\n  UserPromptOpened,\n  UserPromptClosed\n} = require('./browsingContextTypes');\n\n/**\n * Represents a browsing context related events.\n * Described in https://w3c.github.io/webdriver-bidi/#module-contexts-events.\n * While BrowsingContext class represents a browsing context lifecycle and related commands.\n * This class is specific to listening to events. Events can be subscribed to multiple browsing contexts or all of them.\n */\nclass BrowsingContextInspector {\n  constructor(driver, browsingContextIds) {\n    this._driver = driver;\n    this._browsingContextIds = browsingContextIds;\n  }\n  async init() {\n    this.bidi = await this._driver.getBidi();\n  }\n\n  /**\n   * Subscribes to the 'browsingContext.contextCreated' event.\n   * @param {Function} callback - The callback function to handle the event.\n   * @returns {Promise<void>} - A promise that resolves when the event is emitted.\n   */\n  async onBrowsingContextCreated(callback) {\n    await this.subscribeAndHandleEvent('browsingContext.contextCreated', callback);\n  }\n\n  /**\n   * Subscribes to the 'browsingContext.contextDestroyed' event.\n   * @param {Function} callback - The callback function to handle the event.\n   * @returns {Promise<void>} - A promise that resolves when the event is emitted.\n   */\n  async onBrowsingContextDestroyed(callback) {\n    await this.subscribeAndHandleEvent('browsingContext.contextDestroyed', callback);\n  }\n\n  /**\n   * Subscribe to the 'browsingContext.navigationStarted' event.\n   * @param {Function} callback - The callback function to handle the event.\n   * @returns {Promise<void>} - A promise that resolves when the event is emitted.\n   */\n  async onNavigationStarted(callback) {\n    await this.subscribeAndHandleEvent('browsingContext.navigationStarted', callback);\n  }\n\n  /**\n   * Subscribes to the 'browsingContext.fragmentNavigated' event.\n   *\n   * @param {Function} callback - The callback function to handle the event.\n   * @returns {Promise<void>} - A promise that resolves when the event is emitted.\n   */\n  async onFragmentNavigated(callback) {\n    await this.subscribeAndHandleEvent('browsingContext.fragmentNavigated', callback);\n  }\n\n  /**\n   * Subscribes to the 'browsingContext.userPromptClosed' event.\n   *\n   * @param {Function} callback - The callback function to handle the event.\n   * @returns {Promise<void>} - A promise that resolves when the event is emitted.\n   */\n  async onUserPromptClosed(callback) {\n    await this.subscribeAndHandleEvent('browsingContext.userPromptClosed', callback);\n  }\n\n  /**\n   * Subscribes to the 'browsingContext.userPromptOpened' event.\n   *\n   * @param {Function} callback - The callback function to handle the event.\n   * @returns {Promise<void>} - A promise that resolves when the event is emitted.\n   */\n  async onUserPromptOpened(callback) {\n    await this.subscribeAndHandleEvent('browsingContext.userPromptOpened', callback);\n  }\n\n  /**\n   * Subscribes to the 'browsingContext.domContentLoaded' event.\n   *\n   * @param {Function} callback - The callback function to handle the event.\n   * @returns {Promise<void>} - A promise that resolves when the event is emitted.\n   */\n  async onDomContentLoaded(callback) {\n    await this.subscribeAndHandleEvent('browsingContext.domContentLoaded', callback);\n  }\n\n  /**\n   * Subscribes to the 'browsingContext.load' event.\n   *\n   * @param {Function} callback - The callback function to handle the event.\n   * @returns {Promise<void>} - A promise that resolves when the event is emitted.\n   */\n  async onBrowsingContextLoaded(callback) {\n    await this.subscribeAndHandleEvent('browsingContext.load', callback);\n  }\n  async subscribeAndHandleEvent(eventType, callback) {\n    if (this._browsingContextIds != null) {\n      await this.bidi.subscribe(eventType, this._browsingContextIds);\n    } else {\n      await this.bidi.subscribe(eventType);\n    }\n    await this._on(callback);\n  }\n  async _on(callback) {\n    this.ws = await this.bidi.socket;\n    this.ws.on('message', event => {\n      const {\n        params\n      } = JSON.parse(Buffer.from(event.toString()));\n      if (params) {\n        let response = null;\n        if ('navigation' in params) {\n          response = new NavigationInfo(params.context, params.navigation, params.timestamp, params.url);\n        } else if ('accepted' in params) {\n          response = new UserPromptClosed(params.context, params.accepted, params.userText);\n        } else if ('type' in params) {\n          response = new UserPromptOpened(params.context, params.type, params.message);\n        } else {\n          response = new BrowsingContextInfo(params.context, params.url, params.children, params.parent);\n        }\n        callback(response);\n      }\n    });\n  }\n  async close() {\n    if (this._browsingContextIds !== null && this._browsingContextIds !== undefined && this._browsingContextIds.length > 0) {\n      await this.bidi.unsubscribe('browsingContext.contextCreated', 'browsingContext.contextDestroyed', 'browsingContext.fragmentNavigated', 'browsingContext.userPromptClosed', this._browsingContextIds);\n    } else {\n      await this.bidi.unsubscribe('browsingContext.contextCreated', 'browsingContext.contextDestroyed', 'browsingContext.fragmentNavigated', 'browsingContext.userPromptClosed');\n    }\n  }\n}\nasync function getBrowsingContextInstance(driver, browsingContextIds = null) {\n  let instance = new BrowsingContextInspector(driver, browsingContextIds);\n  await instance.init();\n  return instance;\n}\nmodule.exports = getBrowsingContextInstance;","map":{"version":3,"names":["BrowsingContextInfo","NavigationInfo","UserPromptOpened","UserPromptClosed","require","BrowsingContextInspector","constructor","driver","browsingContextIds","_driver","_browsingContextIds","init","bidi","getBidi","onBrowsingContextCreated","callback","subscribeAndHandleEvent","onBrowsingContextDestroyed","onNavigationStarted","onFragmentNavigated","onUserPromptClosed","onUserPromptOpened","onDomContentLoaded","onBrowsingContextLoaded","eventType","subscribe","_on","ws","socket","on","event","params","JSON","parse","Buffer","from","toString","response","context","navigation","timestamp","url","accepted","userText","type","message","children","parent","close","undefined","length","unsubscribe","getBrowsingContextInstance","instance","module","exports"],"sources":["C:/Users/rayan/Documents/GitHub/Project-Outils/node_modules/selenium-webdriver/bidi/browsingContextInspector.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst { BrowsingContextInfo, NavigationInfo, UserPromptOpened, UserPromptClosed } = require('./browsingContextTypes')\n\n/**\n * Represents a browsing context related events.\n * Described in https://w3c.github.io/webdriver-bidi/#module-contexts-events.\n * While BrowsingContext class represents a browsing context lifecycle and related commands.\n * This class is specific to listening to events. Events can be subscribed to multiple browsing contexts or all of them.\n */\nclass BrowsingContextInspector {\n  constructor(driver, browsingContextIds) {\n    this._driver = driver\n    this._browsingContextIds = browsingContextIds\n  }\n\n  async init() {\n    this.bidi = await this._driver.getBidi()\n  }\n\n  /**\n   * Subscribes to the 'browsingContext.contextCreated' event.\n   * @param {Function} callback - The callback function to handle the event.\n   * @returns {Promise<void>} - A promise that resolves when the event is emitted.\n   */\n  async onBrowsingContextCreated(callback) {\n    await this.subscribeAndHandleEvent('browsingContext.contextCreated', callback)\n  }\n\n  /**\n   * Subscribes to the 'browsingContext.contextDestroyed' event.\n   * @param {Function} callback - The callback function to handle the event.\n   * @returns {Promise<void>} - A promise that resolves when the event is emitted.\n   */\n  async onBrowsingContextDestroyed(callback) {\n    await this.subscribeAndHandleEvent('browsingContext.contextDestroyed', callback)\n  }\n\n  /**\n   * Subscribe to the 'browsingContext.navigationStarted' event.\n   * @param {Function} callback - The callback function to handle the event.\n   * @returns {Promise<void>} - A promise that resolves when the event is emitted.\n   */\n  async onNavigationStarted(callback) {\n    await this.subscribeAndHandleEvent('browsingContext.navigationStarted', callback)\n  }\n\n  /**\n   * Subscribes to the 'browsingContext.fragmentNavigated' event.\n   *\n   * @param {Function} callback - The callback function to handle the event.\n   * @returns {Promise<void>} - A promise that resolves when the event is emitted.\n   */\n  async onFragmentNavigated(callback) {\n    await this.subscribeAndHandleEvent('browsingContext.fragmentNavigated', callback)\n  }\n\n  /**\n   * Subscribes to the 'browsingContext.userPromptClosed' event.\n   *\n   * @param {Function} callback - The callback function to handle the event.\n   * @returns {Promise<void>} - A promise that resolves when the event is emitted.\n   */\n  async onUserPromptClosed(callback) {\n    await this.subscribeAndHandleEvent('browsingContext.userPromptClosed', callback)\n  }\n\n  /**\n   * Subscribes to the 'browsingContext.userPromptOpened' event.\n   *\n   * @param {Function} callback - The callback function to handle the event.\n   * @returns {Promise<void>} - A promise that resolves when the event is emitted.\n   */\n  async onUserPromptOpened(callback) {\n    await this.subscribeAndHandleEvent('browsingContext.userPromptOpened', callback)\n  }\n\n  /**\n   * Subscribes to the 'browsingContext.domContentLoaded' event.\n   *\n   * @param {Function} callback - The callback function to handle the event.\n   * @returns {Promise<void>} - A promise that resolves when the event is emitted.\n   */\n  async onDomContentLoaded(callback) {\n    await this.subscribeAndHandleEvent('browsingContext.domContentLoaded', callback)\n  }\n\n  /**\n   * Subscribes to the 'browsingContext.load' event.\n   *\n   * @param {Function} callback - The callback function to handle the event.\n   * @returns {Promise<void>} - A promise that resolves when the event is emitted.\n   */\n  async onBrowsingContextLoaded(callback) {\n    await this.subscribeAndHandleEvent('browsingContext.load', callback)\n  }\n\n  async subscribeAndHandleEvent(eventType, callback) {\n    if (this._browsingContextIds != null) {\n      await this.bidi.subscribe(eventType, this._browsingContextIds)\n    } else {\n      await this.bidi.subscribe(eventType)\n    }\n    await this._on(callback)\n  }\n\n  async _on(callback) {\n    this.ws = await this.bidi.socket\n    this.ws.on('message', (event) => {\n      const { params } = JSON.parse(Buffer.from(event.toString()))\n      if (params) {\n        let response = null\n        if ('navigation' in params) {\n          response = new NavigationInfo(params.context, params.navigation, params.timestamp, params.url)\n        } else if ('accepted' in params) {\n          response = new UserPromptClosed(params.context, params.accepted, params.userText)\n        } else if ('type' in params) {\n          response = new UserPromptOpened(params.context, params.type, params.message)\n        } else {\n          response = new BrowsingContextInfo(params.context, params.url, params.children, params.parent)\n        }\n        callback(response)\n      }\n    })\n  }\n\n  async close() {\n    if (\n      this._browsingContextIds !== null &&\n      this._browsingContextIds !== undefined &&\n      this._browsingContextIds.length > 0\n    ) {\n      await this.bidi.unsubscribe(\n        'browsingContext.contextCreated',\n        'browsingContext.contextDestroyed',\n        'browsingContext.fragmentNavigated',\n        'browsingContext.userPromptClosed',\n        this._browsingContextIds,\n      )\n    } else {\n      await this.bidi.unsubscribe(\n        'browsingContext.contextCreated',\n        'browsingContext.contextDestroyed',\n        'browsingContext.fragmentNavigated',\n        'browsingContext.userPromptClosed',\n      )\n    }\n  }\n}\n\nasync function getBrowsingContextInstance(driver, browsingContextIds = null) {\n  let instance = new BrowsingContextInspector(driver, browsingContextIds)\n  await instance.init()\n  return instance\n}\n\nmodule.exports = getBrowsingContextInstance\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}